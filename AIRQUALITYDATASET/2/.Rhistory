View(namechange)
fix(namechange)
names(namechange)
data(namechange)
View(namechange)
data(namechange)
library(MASS)
library(ISLR)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
install.packages("MASS")
install.packages("ISLR")
install.packages("MASS")
install.packages("ISLR")
lm.fit=lm(medv~lstat,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old+`Unemployment Rate`+`legally defined`+`national alcohol policy`+`Advertising restrictions...24`,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ 'Beer'+'Wine'+'Spirits+15-years old'+`Unemployment Rate`+`legally defined`+`national alcohol policy`+`Advertising restrictions...24`,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer +Wine+Spirits+15-years old +Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old +Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate+,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate,data=namechange)
lm.fit=lm(consumption ~ Beer,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine,data=namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer+Wine+Spirits,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old,data=namechange)
library(readxl)
namechange <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/namechange.xlsx")
View(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years old,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits,data=namechange)
library(readxl)
namechange <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/namechange.xlsx")
View(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+yearsold,data=namechange)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+yearsold,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment+nationalalcoholpolicy+leagallydefined+Advertisingrestrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment+nationalalcoholpolicy+legallydefined+Advertisingrestrictions,data=namechange)
attach(namechange)
summary(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "prediction")
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
abline (lm.fit ,lwd=3,col ="red")
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
plot(consumption ~ Beer,Wine,Spirits,years,Unemployment,nationalalcoholpolicy,legallydefined+Advertisingrestrictions)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
rm(list=ls())
set.seed()
train=sample(392,196)
library(ISLR)
set.seed(1)
lm.fit=lm(mpg∼horsepower ,data=Auto ,subset=train)
attach(Auto)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
set.seed(2)
train=sample (392,196)
lm.fit=lm(mpg∼horsepower ,subset=train)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
rm(list=ls())
library(ISLR)
set.seed(1)
train=sample(392,196)
lm.fit=lm(mpg∼horsepower ,data=Auto ,subset=train)
attach(Auto)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
set.seed(2)
train=sample (392,196)
lm.fit=lm(mpg∼horsepower ,subset=train)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
glm.fit=glm(mpg∼horsepower ,data=Auto)
coef(glm.fit)
glm.fit=glm(mpg∼horsepower ,data=Auto)
coef(glm.fit)
lm.fit=lm(mpg∼horsepower ,data=Auto)
coef(lm.fit)
library(boot)
glm.fit=glm(mpg∼horsepower ,data=Auto)
cv.err=cv.glm(Auto ,glm.fit)
cv.err$delta
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]
+ }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]+ }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] +}
cv.error
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error .10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
+ }
cv.error.10
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error.10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
+ }
cv.error.10
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
}
cv.error.10
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]
}
cv.error
load("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/2/.RData")
View(cv.err)
rm(list=ls())
load("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/1/.RData")
colSums(is.na(AQIDATA))
rm(list=ls()) #removed Global Environment and Variables
setwd("F://OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/2")
setwd("F://OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/2")
rm(list=ls()) #removed Global Environment and Variables
setwd("F://OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/2")
AQISTATIONDATA <- read.csv("station_day.csv", header=T, na.strings=c(""), stringsAsFactors = T)
summary(AQISTATIONDATA)
class(AQISTATIONDATA)
str(AQISTATIONDATA)
AQISTATIONDATA$Date[1]
# Format is incorrect , converted it to day month year formt using as.date function
AQISTATIONDATA$Date <- as.Date(AQISTATIONDATA$Date, format= "%d-%m-%Y")
# verifying changes made to Date column
AQISTATIONDATA$Date[1]
# verify class of the Date Column which is now a Date which was previously imported as Factor
class(AQISTATIONDATA$Date)
stationAP001<-subset(AQISTATIONDATA,StationId== 'AP001')
stationAP005<-subset(AQISTATIONDATA,StationId== 'AP005')
stationBR005<-subset(AQISTATIONDATA,StationId== 'BR005')
stationBR006<-subset(AQISTATIONDATA,StationId== 'BR006')
stationBR007<-subset(AQISTATIONDATA,StationId== 'BR007')
stationBR008<-subset(AQISTATIONDATA,StationId== 'BR008')
stationBR009<-subset(AQISTATIONDATA,StationId== 'BR009')
stationBR010<-subset(AQISTATIONDATA,StationId== 'BR010')
stationDL001<-subset(AQISTATIONDATA,StationId== 'DL001')
stationDL002<-subset(AQISTATIONDATA,StationId== 'DL002')
stationDL003<-subset(AQISTATIONDATA,StationId== 'DL003')
stationDL004<-subset(AQISTATIONDATA,StationId== 'DL004')
stationDL005<-subset(AQISTATIONDATA,StationId== 'DL005')
stationMH005<-subset(AQISTATIONDATA,StationId== 'MH005')
stationMH006<-subset(AQISTATIONDATA,StationId== 'MH006')
stationMH007<-subset(AQISTATIONDATA,StationId== 'MH007')
stationMH008<-subset(AQISTATIONDATA,StationId== 'MH008')
stationMH009<-subset(AQISTATIONDATA,StationId== 'MH009')
stationMH010<-subset(AQISTATIONDATA,StationId== 'MH010')
AQISUBSETDATA <- rbind(
stationAP001,
stationAP005,
stationBR005,
stationBR006,
stationBR007,
stationBR008,
stationBR009,
stationBR010,
stationDL001,
stationDL002,
stationDL003,
stationDL004,
stationDL005,
stationDL002,
stationDL003,
stationDL004,
stationDL005,
stationMH005,
stationMH006,
stationMH007,
stationMH008,
stationMH009,
stationMH010
)
summary(AQISUBSETDATA)
AQISTATIONDATA<- AQISTATIONDATA %>%
drop_na(AQI,AQI_Bucket)
library("caret")
AQISTATIONDATA<- AQISTATIONDATA %>%
drop_na(AQI,AQI_Bucket)
library("tidyr")
AQISTATIONDATA<- AQISTATIONDATA %>%
drop_na(AQI,AQI_Bucket)
colSums(is.na(AQISUBSETDATA))
AQISUBSETDATA<- AQISUBSETDATA %>%
drop_na(AQI,AQI_Bucket)
summary(AQISUBSETDATA)
colSums(is.na(AQISUBSETDATA))
missmap(AQISUBSETDATA,main="Missing Values")
library(Amelia)
missmap(AQISUBSETDATA,main="Missing Values")
View(AQISUBSETDATA)
View(AQISUBSETDATA)
columnsremoved <- c("Toluene","Xylene","NH3")
AQISUBSETDATA = AQISUBSETDATA[,!(names(AQISUBSETDATA) %in% columnsremoved)]
colSums(is.na(AQISUBSETDATA))
AQISUBSETDATA$PM2.5[which(is.na(AQISUBSETDATA$PM2.5))]<- mean(AQISUBSETDATA$PM2.5,na.rm = TRUE)
colSums(is.na(AQISUBSETDATA))
impute= mice(AQISUBSETDATA,m=5,method = c("","","","pmm","pmm","pmm","pmm","pmm","pmm","pmm","pmm","",""),maxit=3)
library(mice)
detach("package:mice", unload = TRUE)
library(mice)
impute= mice(AQISUBSETDATA,m=5,method = c("","","","pmm","pmm","pmm","pmm","pmm","pmm","pmm","pmm","",""),maxit=3)
impute$imp$PM10
View(impute)
summary(AQISUBSETDATA)
AQICLEANDATA = complete(impute,2)
colSums(is.na(AQICLEANDATA))
datestationidremoved <- c("StationId","Date")
AQICLEANDATA = AQICLEANDATA[,!(names(AQICLEANDATA) %in% datestationidremoved)]
library(class)
splitindex <- createDataPartition(AQICLEANDATA$PM2.5, p = 0.75, list = FALSE)
aqi_train  <- AQICLEANDATA[splitindex,]
aqi_test   <- AQICLEANDATA[-splitindex,]
AQIBUCKET <-AQICLEANDATA$AQI_Bucket
View(aqi_train)
View(aqi_train)
rm(aqi_train)
rm(aqi_test)
set.seed(123)
split <- sample.split(AQICLEANDATA$AQI_Bucket,SplitRatio =0.75)
training_set <- subset(AQICLEANDATA,split == TRUE)
test_set <- subset(AQICLEANDATA,split == FALSE)
library("caTools")
set.seed(123)
split <- sample.split(AQICLEANDATA$AQI_Bucket,SplitRatio =0.75)
training_set <- subset(AQICLEANDATA,split == TRUE)
test_set <- subset(AQICLEANDATA,split == FALSE)
training_set[-11] <-scale(training_set[-11])
test_set[-11] <-scale(test_set[-11])
rm(stationAP001,stationAP005,stationBR005,stationBR006,stationBR007,stationBR008,stationBR009,stationBR010,
stationDL001,stationDL002,stationDL003,stationDL004,stationDL005,stationDL002,stationDL003,
stationDL004,stationDL005,stationMH005,stationMH006,stationMH007,stationMH008,stationMH009,
stationMH010)
y_pred <-knn(train=training_set[,-11],
test= test_set[,-11],
cl= training_set[,11],
k=5,
prob=TRUE)
y_pred_10 <-knn(train=training_set[,-11],
test= test_set[,-11],
cl= training_set[,11],
k=10,
prob=TRUE)
cm <- table(test_set[,11],y_pred)
cm
round((sum(diag(cm))/sum(cm))*100,2)
y_pred_15 <-knn(train=training_set[,-11],
test= test_set[,-11],
cl= training_set[,11],
k=15,
prob=TRUE)
y_pred_20 <-knn(train=training_set[,-11],
test= test_set[,-11],
cl= training_set[,11],
k=25,
prob=TRUE)
y_pred_25 <-knn(train=training_set[,-11],
test= test_set[,-11],
cl= training_set[,11],
k=25,
prob=TRUE)
cm_10 = as.matrix(table(Actual = AQIBUCKETTRAIN, Predicted = y_pred_10))
AQIBUCKETTRAIN<- as.factor(aqi_test$AQI_Bucket)
AQIBUCKETTRAIN<- as.factor(test_set$AQI_Bucket)
cm_10 = as.matrix(table(Actual = AQIBUCKETTRAIN, Predicted = y_pred_10))
prop.table(table(training_set$AQI_Bucket))*100
summary(aqi_test$AQI_Bucket)
summary(y_pred_10)
cm <- table(test_set[,11],y_pred)
cm
sum(diag(cm))/length(cl)
round((sum(diag(cm))/sum(cm))*100,2)
cm_10<- table(test_set[,11],y_pred_10)
cm_10
prop.table(table(test_set$AQI_Bucket))*100
prop.table(table(training_set$AQI_Bucket))*100
accuracy_knn<-data.frame(
accuracy_cm_5=round((sum(diag(cm))/sum(cm))*100,2),
accuracy_cm_10=round((sum(diag(cm_10))/sum(cm_10))*100,2),
accuracy_cm_15=round((sum(diag(cm_15))/sum(cm_15))*100,2),
accuracy_cm_20=round((sum(diag(cm_20))/sum(cm_20))*100,2),
accuracy_cm_25=round((sum(diag(cm_25))/sum(cm_25))*100,2))
cm_10<- table(test_set[,11],y_pred_10)
cm_10
cm_15<- table(test_set[,11],y_pred_15)
cm_15
cm_20<- table(test_set[,11],y_pred_20)
cm_20
cm_25<- table(test_set[,11],y_pred_25)
cm_25
accuracy_knn<-data.frame(
accuracy_cm_5=round((sum(diag(cm))/sum(cm))*100,2),
accuracy_cm_10=round((sum(diag(cm_10))/sum(cm_10))*100,2),
accuracy_cm_15=round((sum(diag(cm_15))/sum(cm_15))*100,2),
accuracy_cm_20=round((sum(diag(cm_20))/sum(cm_20))*100,2),
accuracy_cm_25=round((sum(diag(cm_25))/sum(cm_25))*100,2))
View(accuracy_knn)
View(accuracy_knn)
cm_new <- table(train_set[,11],y_pred)
cm_new
cm_new <- table(training_set[,11],y_pred)
cm_new
summary(aqi_test$AQI_Bucket)
cm_25
summary(y_pred)
cm
aqiknntrain <- training_set[,names(training_set) != "AQI_Bucket"]
preProcaqitrain <- preProcess(x = aqiknntrain,method = c("center", "scale"))
preProcaqitrain
set.seed(400)
ctrl <- trainControl(method="repeatedcv",repeats = 2)
knncaretFit <- train(AQI_Bucket ~ ., data = training_set, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 10)
knncaretFit
plot(knncaretFit)
knnPredictAQI <- predict(knncaretFit,newdata = test_set)
summary(knnPredictAQI)
mean(knnPredictAQI == test_set$AQI_Bucket)
confusionMatrix(knnPredictAQI, test_set$AQI_Bucket)
plot(knncaretFit)
AQILOGISTICS=multinom(AQI_Bucket~PM2.5+PM10+NO+NO2+NOx+CO+SO2+O3+Benzene, data=training_set)
library("nnet")
AQILOGISTICS=multinom(AQI_Bucket~PM2.5+PM10+NO+NO2+NOx+CO+SO2+O3+Benzene, data=training_set)
ctable <- table(training_set$AQI_Bucket, AQI_TRAIN_PREDICTED_LOGISTICS)
ctable
AQI_TRAIN_PREDICTED_LOGISTICS<- predict(AQILOGISTICS,newdata = training_set,"class")
ctable <- table(training_set$AQI_Bucket, AQI_TRAIN_PREDICTED_LOGISTICS)
ctable
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
library('gmodels')
install.packages("gmodels")
library(gmodels)
CrossTable(x = training_set$AQI_Bucket, y = AQI_TRAIN_PREDICTED_LOGISTICS, prop.chisq=FALSE)
summary(AQILOGISTICS)
head(probability.table <- fitted(AQILOGISTICS))
exp(coef(AQILOGISTICS))
round((sum(diag(ctable))/sum(ctable))*100,2)
AQI_TEST_PREDICTED_LOGISTICS<- predict(AQILOGISTICS,newdata = test_set,"class")
cTESTtable <- table(test_set$AQI_Bucket, AQI_TEST_PREDICTED_LOGISTICS)
cTESTtable
round((sum(diag(cTESTtable))/sum(cTESTtable))*100,2)
error_rate = function(actual, predicted) {
mean(actual != predicted)
}
error_rate(actual = training_set$AQI_Bucket, predicted = AQI_TRAIN_PREDICTED_LOGISTICS)
error_rate = function(actual, predicted) {
mean(actual != predicted)*100
}
error_rate(actual = training_set$AQI_Bucket, predicted = AQI_TRAIN_PREDICTED_LOGISTICS)
error_rate = function(actual, predicted) {
mean(actual != predicted)*100
}
error_rate(actual = test_set$AQI_Bucket, predicted = AQI_TEST_PREDICTED_LOGISTICS)
mlog__test_error_rate = function(actual, predicted) {
mean(actual != predicted)*100
}
error_rate(actual = test_set$AQI_Bucket, predicted = AQI_TEST_PREDICTED_LOGISTICS)
mlog_train_error_rate = function(actual, predicted) {
mean(actual != predicted)*100
}
mlog_train_error_rate(actual = training_set$AQI_Bucket, predicted = AQI_TRAIN_PREDICTED_LOGISTICS)
rm(error_rate)
mlog_training_accuracies = confusionMatrix(ctable, positive = "Yes")
c(training_accuracies$overall["Accuracy"],
training_accuracies$byClass["Sensitivity"],
training_accuracies$byClass["Specificity"])
c(mlog_training_accuracies$overall["Accuracy"],
mlog_training_accuracies$byClass["Sensitivity"],
mlog_training_accuracies$byClass["Specificity"])
mlog_train_roc = roc(training_set$AQI_Bucket ~ AQI_TRAIN_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
library(pROC)
mlog_train_roc = roc(training_set$AQI_Bucket ~ AQI_TRAIN_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
mlog_train_roc = multiclass.roc(training_set$AQI_Bucket ~ AQI_TRAIN_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
class(AQI_TRAIN_PREDICTED_LOGISTICS)
ord_AQI_TRAIN_PREDICTED_LOGISTICS<- factor(AQI_TRAIN_PREDICTED_LOGISTICS,
ordered = TRUE, levels = c('Good','Moderate','Poor','Satisfactory','Severe','Very Poor'))
mlog_train_roc = multiclass.roc(training_set$AQI_Bucket ~ ord_AQI_TRAIN_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
auc <- performance(AQI_TRAIN_PREDICTED_LOGISTICS, "auc")
library(ROCR)
auc <- performance(AQI_TRAIN_PREDICTED_LOGISTICS, "auc")
ord_AQI_TEST_PREDICTED_LOGISTICS<- factor(AQI_TEST_PREDICTED_LOGISTICS,
ordered = TRUE, levels = c('Good','Moderate','Poor','Satisfactory','Severe','Very Poor'))
mlog_test_roc = multiclass.roc(test_set$AQI_Bucket ~ ord_AQI_TEST_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
ord_AQI_TEST_PREDICTED_LOGISTICS
AQI_TEST_PREDICTED_LOGISTICS
mlog_train_roc = multiclass.roc(training_set$AQI_Bucket ~ ord_AQI_TRAIN_PREDICTED_LOGISTICS, plot = TRUE, print.auc = TRUE)
View(test_set)
knn_roc = multiclass.roc(test_set$AQI_Bucket ~ y_pred, plot = TRUE, print.auc = TRUE)
ord_y_pred<- factor(y_pred,ordered = TRUE, levels = c('Good','Moderate','Poor','Satisfactory','Severe','Very Poor'))
knn_roc = multiclass.roc(test_set$AQI_Bucket ~ ord_y_pred, plot = TRUE, print.auc = TRUE)
ord_knnPredictAQI<- factor(knnPredictAQI,ordered = TRUE, levels = c('Good','Moderate','Poor','Satisfactory','Severe','Very Poor'))
knn_caret_roc = multiclass.roc(test_set$AQI_Bucket ~ ord_knnPredictAQI, plot = TRUE, print.auc = TRUE)
round((sum(diag(ctable))/sum(ctable))*100,2)
round((sum(diag(cTESTtable))/sum(cTESTtable))*100,2)
chisq.test(training_set$AQI_Bucket,predict(AQILOGISTICS))
library("DescTools")
install.packages('DescTools')
library("DescTools")
Rsqare_mlog_train<- PseudoR2(AQILOGISTICS, which = c("CoxSnell","Nagelkerke","McFadden"))
Rsqare_mlog_train
n_Rsqare_mlog_train<- PseudoR2(AQI_TRAIN_PREDICTED_LOGISTICS, which = c("CoxSnell","Nagelkerke","McFadden"))
rm(n_Rsqare_mlog_train)
Rsqare_mlog<- PseudoR2(AQILOGISTICS, which = c("CoxSnell","Nagelkerke","McFadden"))
Rsqare_mlog
rm(Rsquare_mlog_train)
rm(Rsquare_mlog_train)
rm(Rsquare_mlog_train)
library(lmtest)
lrtest(AQILOGISTICS, "ses")
lrtest(AQILOGISTICS, "Good")
class(AQI_TRAIN_PREDICTED_LOGISTICS)
confusionMatrix(knnPredictAQI, test_set$AQI_Bucket)
cTESTtable <- table(test_set$AQI_Bucket, AQI_TEST_PREDICTED_LOGISTICS)
cTESTtable
confusionMatrix(knnPredictAQI, test_set$AQI_Bucket)
CrossTable(x = training_set$AQI_Bucket, y = AQI_TRAIN_PREDICTED_LOGISTICS, prop.chisq=FALSE)
confusionMatrix(y_pred, test_set$AQI_Bucket)
summary(knnPredictAQI)
knncaretFit
knncaretFit_test <- test(AQI_Bucket ~ ., data = test_set, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 10)
knncaretFit_test
knncaretFit_test <- train(AQI_Bucket ~ ., data = test_set, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 10)
knncaretFit_test
summary(aqi_test$AQIBUCKET)
summary(test_set$AQIBUCKET)
test_set$AQIBUCKET
View(test_set)
count(test_set$AQIBUCKET)
library(plyr)
count(test_set$AQIBUCKET)
count(test_set$AQI_BUCKET)
count(test_set$AQI_Bucket)
summary(test_set$AQI_Bucket)
CrossTable(x = test_set$AQI_Bucket, y = y_pred, prop.chisq=FALSE)
CrossTable(x = test_set$AQI_Bucket, y = knnPredictAQI, prop.chisq=FALSE)
CrossTable(x = training_set$AQI_Bucket, y = AQI_TRAIN_PREDICTED_LOGISTICS, prop.chisq=FALSE)
CrossTable(x = test_set$AQI_Bucket, y = AQI_TEST_PREDICTED_LOGISTICS, prop.chisq=FALSE)
cTESTtable
