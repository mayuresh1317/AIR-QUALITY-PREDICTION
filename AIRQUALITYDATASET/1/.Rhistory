plot(lstat ,medv ,col="red")
plot(AQI,NO2 ,col="red")
plot(AQI,NO2 ,pch =20)
plot(1:20,1:20,pch =1:20)
par(mfrow=c(2,2))
plot(my_fit)
plot(hatvalues (my_fit))
which.max(hatvalues (my_fit))
lm.fit=lm(medv∼lstat+age ,data=Boston )
summary (lm.fit)
lm.fit=lm(medv∼.,data=Boston)
summary (lm.fit)
library (car)
install.packages("car")
library (car)
vif(lm.fit)
vif(lm.fit)
library(readxl)
final <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/final.xlsx")
View(final)
fix(final)
names(final)
data(final)
lm.final=lm(medv~lstat,data=final)
attach(final)
summary(lm.fit)
coef(lm.final)
confint(lm.final)
predict(lm.final,data.frame(lstat=c(5,10,15)),interval= "confidence")
predict(lm.final,data.frame(lstat=c(5,10,15)),interval= "prediction")
library(readxl)
alcohol_abstainers_reduction_column_name_chnage <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/alcohol_abstainers_reduction - column name chnage.xlsx")
View(alcohol_abstainers_reduction_column_name_chnage)
fix(alcohol_abstainers_reduction - column name chnage)
names(alcohol_abstainers_reduction - column name chnage)
data(alcohol_abstainers_reduction - column name chnage)
lm.fit=lm(consumption data=alcohol_abstainers_reduction - column name chnage)
attach(alcohol_abstainers_reduction - column name chnage)
summary(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "prediction")
fix(alcohol_abstainers_reduction - column name chnage)
names(alcohol_abstainers_reduction - column name chnage)
data(alcohol_abstainers_reduction - column name chnage)
lm.fit=lm(consumption~ Beer+Wine+Spirit+15-years old+`Unemployment Rate`+leagally defined+national alcohol policy+`Advertising restrictions` data=alcohol_abstainers_reduction - column name chnage)
attach(alcohol_abstainers_reduction - column name chnage)
summary(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "prediction")
fix(alcohol_abstainers_reduction - column name chnage)
names(alcohol_abstainers_reduction - column name chnage)
data(alcohol_abstainers_reduction - column name chnage)
lm.fit=lm(consumption~ Beer+Wine+Spirit+15-years old+`Unemployment Rate`+leagally defined+national alcohol policy+`Advertising restrictions` data=alcohol_abstainers_reduction - column name chnage)
attach(alcohol_abstainers_reduction - column name chnage)
summary(lm.fit)
library(readxl)
namechange <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/namechange.xlsx")
View(namechange)
fix(namechange)
names(namechange)
data(namechange)
View(namechange)
data(namechange)
library(MASS)
library(ISLR)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
install.packages("MASS")
install.packages("ISLR")
install.packages("MASS")
install.packages("ISLR")
lm.fit=lm(medv~lstat,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old+`Unemployment Rate`+`legally defined`+`national alcohol policy`+`Advertising restrictions...24`,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ 'Beer'+'Wine'+'Spirits+15-years old'+`Unemployment Rate`+`legally defined`+`national alcohol policy`+`Advertising restrictions...24`,data=namechange)
attach(namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer +Wine+Spirits+15-years old +Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old +Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate+legally defined+national alcohol policy+Advertising restrictions,data=namechange)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate+,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+Unemployment Rate,data=namechange)
lm.fit=lm(consumption ~ Beer,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine,data=namechange)
summary(lm.fit)
lm.fit=lm(consumption ~ Beer+Wine+Spirits,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+15-years old,data=namechange)
library(readxl)
namechange <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/namechange.xlsx")
View(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years old,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits,data=namechange)
library(readxl)
namechange <- read_excel("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/Statistics for Data analysis/Assignments/Datasets/INTIAL/ALCOHOL/combinecsv/namechange.xlsx")
View(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+yearsold,data=namechange)
data(namechange)
fix(namechange)
names(namechange)
data(namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+yearsold,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment+nationalalcoholpolicy+leagallydefined+Advertisingrestrictions,data=namechange)
lm.fit=lm(consumption ~ Beer+Wine+Spirits+years+Unemployment+nationalalcoholpolicy+legallydefined+Advertisingrestrictions,data=namechange)
attach(namechange)
summary(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval= "prediction")
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
abline (lm.fit ,lwd=3,col ="red")
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
plot(consumption ~ Beer,Wine,Spirits,years,Unemployment,nationalalcoholpolicy,legallydefined+Advertisingrestrictions)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
rm(list=ls())
set.seed()
train=sample(392,196)
library(ISLR)
set.seed(1)
lm.fit=lm(mpg∼horsepower ,data=Auto ,subset=train)
attach(Auto)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
set.seed(2)
train=sample (392,196)
lm.fit=lm(mpg∼horsepower ,subset=train)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
rm(list=ls())
library(ISLR)
set.seed(1)
train=sample(392,196)
lm.fit=lm(mpg∼horsepower ,data=Auto ,subset=train)
attach(Auto)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
set.seed(2)
train=sample (392,196)
lm.fit=lm(mpg∼horsepower ,subset=train)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
lm.fit2=lm(mpg∼poly(horsepower ,2),data=Auto , subset=train)
mean((mpg -predict (lm.fit2 ,Auto ))[- train]^2)
lm.fit3=lm(mpg∼poly(horsepower ,3),data=Auto , subset=train)
mean((mpg -predict (lm.fit3 ,Auto ))[- train]^2)
glm.fit=glm(mpg∼horsepower ,data=Auto)
coef(glm.fit)
glm.fit=glm(mpg∼horsepower ,data=Auto)
coef(glm.fit)
lm.fit=lm(mpg∼horsepower ,data=Auto)
coef(lm.fit)
library(boot)
glm.fit=glm(mpg∼horsepower ,data=Auto)
cv.err=cv.glm(Auto ,glm.fit)
cv.err$delta
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]
+ }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]+ }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] }
cv.error
cv.error=rep(0,5)
for (i in 1:5){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto) + cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1] +}
cv.error
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error .10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
+ }
cv.error.10
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
+ glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
+ cv.error.10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
+ }
cv.error.10
set.seed(17)
cv.error.10=rep(0 ,10)
for (i in 1:10){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto ,glm.fit ,K=10) $delta [1]
}
cv.error.10
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg∼poly(horsepower ,i),data=Auto)
cv.error[i]=cv.glm(Auto ,glm.fit)$delta [1]
}
cv.error
load("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/2/.RData")
View(cv.err)
rm(list=ls())
load("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/1/.RData")
colSums(is.na(AQIDATA))
rm(list=ls())
setwd("F://OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/1")
load("F:/OneDrive - National College of Ireland/NCI/SEMESTER 1/SUBJECTS/DMML/Project/Dataset/AIRQUALITYDATASET/1/.RData")
rm(list=ls())
AQIDATA <- read.csv("city_day.csv", header=T, na.strings=c(""), stringsAsFactors = T)
summary(AQIDATA)
class(AQIDATA)
str(AQIDATA)
AQIDATA$Date[1]
AQIDATA$Date <- as.Date(AQIDATA$Date, format= "%d-%m-%Y")
AQIDATA$Date[1]
class(AQIDATA$Date)
colSums(is.na(AQIDATA))
AQIDATA <- AQIDATA %>%
drop_na(AQI,AQI_Bucket)
library("caret")
AQIDATA <- AQIDATA %>%
drop_na(AQI,AQI_Bucket)
library("dplyr")
AQIDATA <- AQIDATA %>%
drop_na(AQI,AQI_Bucket)
library("tidyr")
AQIDATA <- AQIDATA %>%
drop_na(AQI,AQI_Bucket)
colSums(is.na(AQIDATA))
AQIDATA<- AQIDATA %>%
fill(PM2.5, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(NO, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(NO2, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(NOx, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(CO, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(SO2, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(O3, .direction = "downup")
AQIDATA<- AQIDATA %>%
fill(Benzene, .direction = "downup")
summary(AQIDATA)
AQIDATA <- impute_lm(AQIDATA,PM10 ~ Benzene + O3+ SO2 + CO + NO + PM2.5+ NO2)
library("simputation")
AQIDATA <- impute_lm(AQIDATA,PM10 ~ Benzene + O3+ SO2 + CO + NO + PM2.5+ NO2)
AQIDATA <- impute_lm(AQIDATA,NH3 ~ NO+NO2+NOx)
AQIDATA <- impute_lm(AQIDATA,Toluene ~ Benzene + O3+ SO2 + CO + NO + PM2.5)
AQIDATA <- impute_lm(AQIDATA,Xylene ~ Benzene + O3+ SO2 + CO + NO + PM2.5+ NO2)
splitindex <- createDataPartition(AQIDATA$PM2.5, p = 0.75, list = FALSE)
aqi_train  <- AQIDATA[splitindex,]
aqi_test   <- AQIDATA[-splitindex,]
modelplsfit <- train(
AQI~ PM2.5 + PM10 + NO + NO2 + NOx + NH3 + CO + SO2 + O3 + Benzene  + Toluene + Xylene, data = aqi_train, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 12),
tuneLength = 12
)
plot(modelplsfit)
modelplsfit$bestTune
summary(modelplsfit$finalModel)
summary(modelplsfit)
summary(modelplsfit$finalModel)
predictionplsmodel <- modelplsfit %>% predict(aqi_train)
predictionplsmodel_training <- modelplsfit %>% predict(aqi_train)
predictionplsmodel_test <- modelplsfit %>% predict(aqi_test)
rm(predictionplsmodel)
PLSCARETMETRICS_training<-data.frame(
RMSE = caret::RMSE(predictionplsmodel_training, aqi_train$AQI),
Rsquare = caret::R2(predictionplsmodel_training, aqi_train$AQI),
MAE= caret::MAE(predictionplsmodel_training,aqi_train$AQI)
)
View(PLSCARETMETRICS_training)
View(PLSCARETMETRICS_training)
PLSMLpackageMETRICS_training<-data.frame(
PLSRMSE   =RMSE(predictionplsmodel_training, aqi_train$AQI),
PLSMAE    =MAE(predictionplsmodel_training, aqi_train$AQI),
PLSMAPE   =MAPE(predictionplsmodel_training, aqi_train$AQI))
library("MLmetrics")
PLSMLpackageMETRICS_training<-data.frame(
PLSRMSE   =RMSE(predictionplsmodel_training, aqi_train$AQI),
PLSMAE    =MAE(predictionplsmodel_training, aqi_train$AQI),
PLSMAPE   =MAPE(predictionplsmodel_training, aqi_train$AQI))
View(PLSCARETMETRICS_training)
View(PLSCARETMETRICS_training)
View(PLSCARETMETRICS_training)
View(PLSMLpackageMETRICS_training)
View(PLSMLpackageMETRICS_training)
plsmapecomputed_training <- function(aqi_train$AQI,predictionplsmodel_training){
plsmapecomputed_training <- mean(abs((aqi_train$AQI - predictionplsmodel_training)/aqi_train$AQI))*100
return (plsmapecomputed_training)
}
plsmapecomputed_training
plsmapecomputed_training <- function(aqi_train$AQI,predictionplsmodel_training){
plsmapecomputed_training <- mean(abs((aqi_train$AQI - predictionplsmodel_training)/aqi_train$AQI))/100
return (plsmapecomputed_training)
}
plsmapecomputed_training
plsmapecomputed_training <- function(aqi_train$AQI,predictionplsmodel_training){
plsmapecomputed_training <- mean(abs((aqi_train$AQI - predictionplsmodel_training)/aqi_train$AQI))
return (plsmapecomputed_training)
}
plsmapecomputed_training
plsmapecomputed_training <- function(aqi_train$AQI,predictionplsmodel_training){
plsmapecomputed_training <- mean(abs((aqi_train$AQI - predictionplsmodel_training)/aqi_train$AQI))*100
return (plsmapecomputed_training)
}
plsmapecomputed_training
PLSCARETMETRICS_testing<-data.frame(
RMSE = caret::RMSE(predictionplsmodel, aqi_test$AQI),
Rsquare = caret::R2(predictionplsmodel, aqi_test$AQI),
MAE= caret::MAE(predictionplsmodel,aqi_test$AQI)
)
PLSCARETMETRICS_testing<-data.frame(
RMSE = caret::RMSE(predictionplsmodel_test, aqi_test$AQI),
Rsquare = caret::R2(predictionplsmodel_test, aqi_test$AQI),
MAE= caret::MAE(predictionplsmodel_test,aqi_test$AQI)
)
View(PLSCARETMETRICS_testing)
View(PLSCARETMETRICS_testing)
PLSMLpackageMETRICS_testing<-data.frame(
PLSRMSE   =RMSE(predictionplsmodel_test, aqi_test$AQI),
PLSMAE    =MAE(predictionplsmodel_test, aqi_test$AQI),
PLSMAPE   =MAPE(predictionplsmodel_test, aqi_test$AQI))
View(PLSMLpackageMETRICS_testing)
View(PLSMLpackageMETRICS_testing)
plsmapecomputed_testing <- function(aqi_test$AQI,predictionplsmodel_test){
plsmapecomputed_testing <- mean(abs((aqi_test$AQI - predictionplsmodel_test)/aqi_test$AQI))*100
return (plsmapecomputed_testing)
}
plsmapecomputed
plsmapecomputed_testing <- function(aqi_test$AQI,predictionplsmodel_test){
plsmapecomputed_testing <- mean(abs((aqi_test$AQI - predictionplsmodel_test)/aqi_test$AQI))*100
return (plsmapecomputed_testing)
}
plsmapecomputed_testing
set.seed(123)
modelpcrfit <- train(
AQI~ PM2.5 + PM10 + NO + NO2 + NOx + NH3 + CO + SO2 + O3 + Benzene  + Toluene + Xylene, data = aqi_train, method = "pcr",
scale = TRUE,
trControl = trainControl("cv", number = 12),
tuneLength = 12
)
plot(modelpcrfit)
modelpcrfit$bestTune
summary(modelpcrfit$finalModel)
summary(modelpcrfit)
predictionpcrmodel_tarining <- modelpcrfit %>% predict(aqi_train)
PCRCARETMERICS_training<-data.frame(
RMSE = caret::RMSE(predictionpcrmodel_tarining, aqi_train$AQI),
Rsquare = caret::R2(predictionpcrmodel_tarining, aqi_train$AQI),
MAE= caret::MAE(predictionpcrmodel_tarining,aqi_train$AQI)
)
View(PCRCARETMERICS_training)
View(PCRCARETMERICS_training)
PCRMLpackageMetrics_training <-data.frame(
RMSEPCR      =RMSE(predictionpcrmodel_tarining, aqi_train$AQI),
MAEPCR       =MAE(predictionpcrmodel_tarining, aqi_train$AQI),
MAPEPCR      =MAPE(predictionpcrmodel_tarining, aqi_train$AQI))
View(PCRMLpackageMetrics_training)
View(PCRMLpackageMetrics_training)
PCRmapecomputed_training<- function(aqi_train$AQI,predictionpcrmodel_tarining){
PCRmapecomputed_training <- mean(abs((aqi_train$AQI - predictionpcrmodel_tarining)/aqi_train$AQI))*100
return (PCRmapecomputed_training)
}
PCRmapecomputed_training
predictionpcrmodel_testing <- modelpcrfit %>% predict(aqi_test)
PCRCARETMERICS_testing<-data.frame(
RMSE = caret::RMSE(predictionpcrmodel_testing, aqi_test$AQI),
Rsquare = caret::R2(predictionpcrmodel_testing, aqi_test$AQI),
MAE= caret::MAE(predictionpcrmodel_testing,aqi_test$AQI)
)
View(PCRCARETMERICS_testing)
View(PCRCARETMERICS_testing)
PCRMLpackageMetrics_testing <-data.frame(
RMSEPCR      =RMSE(predictionpcrmodel_testing, aqi_test$AQI),
MAEPCR       =MAE(predictionpcrmodel_testing, aqi_test$AQI),
MAPEPCR      =MAPE(predictionpcrmodel_testing, aqi_test$AQI))
View(aqi_test)
View(PCRMLpackageMetrics_testing)
View(PCRMLpackageMetrics_testing)
PCRmapecomputed_testing<- function(aqi_test$AQI,predictionpcrmodel_testing){
PCRmapecomputed_testing <- mean(abs((aqi_test$AQI - predictionpcrmodel_testing)/aqi_test$AQI))*100
return (PCRmapecomputed_testing)
}
PCRmapecomputed_testing
library(pls)
PLS_LOO_train <- plsr(AQI~ PM2.5 + PM10 + NO + NO2 + NOx + NH3 + CO + SO2 + O3 + Benzene  + Toluene + Xylene, ncomp = 12, data = aqi_train, validation = "LOO")
summary(PLS_LOO_train)
View(PLS_LOO_train)
View(PCRCARETMERICS_testing)
View(modelplsfit)
View(modelplsfit)
plot(PLS_LOO_train)
PLS_LOO_train$bestTune
View(PLS_LOO_train)
View(PLS_LOO_train)
summary(PLS_LOO_train$finalModel)
plot(RMSEP(gasPLS_LOO_train1), legendpos = "topright")
plot(RMSEP(PLS_LOO_train1), legendpos = "topright")
plot(RMSEP(PLS_LOO_train), legendpos = "topright")
plot(PLS_LOO_train, plottype = "scores", comps = 1:6)
LOOpredictionplsmodel_training <- PLS_LOO_train%>% predict(aqi_train)
LOO_PLSCARETMETRICS_training<-data.frame(
RMSE = caret::RMSE(LOOpredictionplsmodel_training, aqi_train$AQI),
Rsquare = caret::R2(LOOpredictionplsmodel_training, aqi_train$AQI),
MAE= caret::MAE(LOOpredictionplsmodel_training,aqi_train$AQI)
)
# RMSE R Square MAE for Training Data using Caret
LOO_PLSCARETMETRICS_training<-data.frame(
RMSE = caret::RMSE(LOOpredictionplsmodel_training, aqi_train$AQI),
Rsquare = caret::R2(LOOpredictionplsmodel_training, aqi_train$AQI),
MAE= caret::MAE(LOOpredictionplsmodel_training,aqi_train$AQI)
)
LOO_PLSCARETMETRICS_training<-data.frame(
RMSE = caret::RMSE(LOOpredictionplsmodel_training, aqi_train$AQI),
Rsquare = caret::R2(LOOpredictionplsmodel_training, aqi_train$AQI),
MAE= caret::MAE(LOOpredictionplsmodel_training,aqi_train$AQI)
)
explvar(PLS_LOO_train)
PCR_LOO_train <- pcr(AQI~ PM2.5 + PM10 + NO + NO2 + NOx + NH3 + CO + SO2 + O3 + Benzene  + Toluene + Xylene, ncomp = 12, data = aqi_train, validation = "LOO")
aggr_plot <- aggr(AQIDATA, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
library(VIM)
library(VIM)
aggr_plot <- aggr(AQIDATA, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
summary(PCR_LOO_train)
plot(PCR_LOO_train)
plot(RMSEP(PCR_LOO_train), legendpos = "topright")
View(PCR_LOO_train)
View(aqi_test)
loo_pls_training_result  <-data.frame(
RMSEPls_loo     =RMSE(PLS_LOO_train$fitted.values, aqi_train$AQI),
MAEPls_loo      =MAE(PLS_LOO_train$fitted.values, aqi_train$AQI),
MAPEpls_loo      =MAPE(PLS_LOO_train$fitted.values, aqi_train$AQI))
View(loo_pls_training_result)
predictionpls_test_loo <- PLS_LOO_train %>% predict(aqi_test)
loo_pls_testing_result  <-data.frame(
RMSEPls_loo     =RMSE(predictionpls_test_loo, aqi_test$AQI),
MAEPls_loo      =MAE(predictionpls_test_loo, aqi_test$AQI),
MAPEpls_loo      =MAPE(predictionpls_test_loo, aqi_test$AQI))
View(loo_pls_testing_result)
Rsquare_pls_loo_trainig = caret::R2(PLS_LOO_train$fitted.values, aqi_train$AQI),
Rsquare_pls_loo_trainig = caret::R2(PLS_LOO_train$fitted.values, aqi_train$AQI)
Rsquare_pls_loo_trainig = caret::R2(PLS_LOO_train$fitted.values,aqi_train$AQI)
Rsquare_pls_loo_trainig=R2(PLS_LOO_train$fitted.values,aqi_train$AQI)
loo_pcr_training_result  <-data.frame(
RMSEPls_loo     =RMSE(PCR_LOO_train$fitted.values, aqi_test$AQI),
MAEPls_loo      =MAE(PCR_LOO_train$fitted.values, aqi_test$AQI),
MAPEpls_loo      =MAPE(PCR_LOO_train$fitted.values, aqi_test$AQI))
predictionpcr_test_loo <- PCR_LOO_train %>% predict(aqi_test)
loo_pcr_testing_result  <-data.frame(
RMSEPls_loo     =RMSE(predictionpcr_test_loo, aqi_test$AQI),
MAEPls_loo      =MAE(predictionpcr_test_loo, aqi_test$AQI),
MAPEpls_loo      =MAPE(predictionpcr_test_loo, aqi_test$AQI))
loo_pcr_training_result  <-data.frame(
RMSEPls_loo     =RMSE(PCR_LOO_train$fitted.values, aqi_train$AQI),
MAEPls_loo      =MAE(PCR_LOO_train$fitted.values, aqi_train$AQI),
MAPEpls_loo      =MAPE(PCR_LOO_train$fitted.values, aqi_train$AQI))
loo_pcr_testing_result  <-data.frame(
RMSEPls_loo     =RMSE(predictionpcr_test_loo, aqi_test$AQI),
MAEPls_loo      =MAE(predictionpcr_test_loo, aqi_test$AQI),
MAPEpls_loo      =MAPE(predictionpcr_test_loo, aqi_test$AQI))
View(loo_pcr_testing_result)
View(loo_pcr_training_result)
